name: Build and Release Dependency Tarballs

on:
  schedule:
    - cron: "0 3 * * *" # Daily at 03:00 UTC
  workflow_dispatch:

concurrency:
  group: build-and-release-deps
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  find-new-tags:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      build_matrix: ${{ steps.set-matrix.outputs.matrix }}

    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup uv
        uses: astral-sh/setup-uv@v7
        with:
          working-directory: scripts/

      - name: Clone ebuild overlay repo
        run: |
          gh repo clone peppapig450/nicks_repo ebuilds -- --depth=1

      - name: Generate ebuild index from overlay
        run: |
          uv run --project scripts \
            --group generate-ebuild-index \
            --frozen \
            --no-dev \
            scripts/generate_ebuild_index.py -o ebuild_index.json ebuilds

      - name: List existing release tags
        id: list-released-tags
        run: |
          # collect all tag names that already have a release in this repo
          gh release list --exclude-drafts --exclude-pre-releases \
            --limit 1000 --json tagName \
            | jq -r '.[].tagName' > released_tags.txt

      - name: Prepare build matrix
        id: set-matrix
        shell: bash
        run: |
          matrix="$(ci/build-matrix.sh config/vendor_manifest.json released_tags.txt ebuild_index.json)"
          echo "matrix=${matrix}" >> ${GITHUB_OUTPUT}

  build-and-release:
    needs: find-new-tags
    runs-on: ubuntu-latest
    # Skip if no new tags
    if: needs.find-new-tags.outputs.build_matrix != '[]'

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.find-new-tags.outputs.build_matrix) }}

    steps:
      - uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Dump matrix values
        run: |
          echo "Full matrix values:"
          echo '${{ toJSON(matrix) }}'

      - name: Setup language environment
        uses: ./.github/actions/setup-language
        with:
          language: ${{ matrix.language }}

      - name: Build vendor tarball
        id: build
        shell: bash
        run: |
          mapfile -t lines < <(jq -n \
            --arg name "${{ matrix.name }}" \
            --arg repo "${{ matrix.repo }}" \
            --arg vcs "${{ matrix.vcs }}" \
            --arg tag "${{ matrix.tag }}" \
            --arg subdir "${{ matrix.subdir }}" \
            '{name: $name, repo: $repo, vcs: $vcs, tag: $tag, subdir: $subdir}' \
            | bash ci/build-"${{ matrix.language }}"-deps.sh)

          echo "vendored_tarball=${lines[0]}" >> $GITHUB_OUTPUT
          if [[ "${{ matrix.language }}" == "rust" ]]; then
            echo "base_dir=${lines[1]}" >> $GITHUB_OUTPUT
          fi

      - name: Setup uv (Rust only)
        if: ${{ (matrix.language == 'rust') && (matrix.build_crates) }}
        uses: astral-sh/setup-uv@v7
        with:
          working-directory: scripts/

      - name: Create crates tarball (Rust only)
        if: ${{ (matrix.language == 'rust') && (matrix.build_crates) }}
        id: crates
        run: |
          VERSION="${{ matrix.tag }}"
          VERSION="${VERSION#v}"
          CRATES_TARBALL="${{ matrix.name }}-${VERSION}-crates.tar.xz"

          uv run --project scripts \
            --group vendor-crates \
            --frozen \
            --no-dev \
            scripts/vendor_crates.py \
              -o "$CRATES_TARBALL" \
              "${{ steps.build.outputs.base_dir }}"

          echo "crates_tarball=$CRATES_TARBALL" >> $GITHUB_OUTPUT

      - name: Create vendored release
        run: |
          bash ci/create-release.sh \
            "${{ steps.build.outputs.vendored_tarball }}" \
            "${{ matrix.name }}" \
            "${{ matrix.tag }}" \
            "${{ matrix.vcs }}" \
            "${{ matrix.build_type }}" \
            "${{ matrix.language }}" \
            "${{ steps.crates.outputs.crates_tarball || '' }}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
