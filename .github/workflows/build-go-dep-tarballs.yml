name: Build and Release Go Dependency Tarballs

on:
  schedule:
    - cron: '0 3 * * *'     # Daily at 03:00 UTC
  workflow_dispatch:

concurrency:
  group: build-and-release-go-deps
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  find-new-tags:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      build_matrix: ${{ steps.set-matrix.outputs.matrix }}


    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: List existing release tags
        id: list-released-tags
        run: |
          # collect all tag names that already have a release in this repo
          gh release list --exclude-drafts --exclude-pre-releases \
            --limit 1000 --json tagName \
            | jq -r '.[].tagName' > released_tags.txt

      - name: Prepare build matrix
        id: set-matrix
        shell: bash
        run: |
          matrix="$(ci/build-matrix.sh config/go_modules.json released_tags.txt)"
          echo "matrix=${matrix}" >> ${GITHUB_OUTPUT}


  build-and-release:
    needs: find-new-tags
    runs-on: ubuntu-latest
    # Skip if no new tags
    if: needs.find-new-tags.outputs.build_matrix != '[]'

    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.find-new-tags.outputs.build_matrix) }}

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: 'stable'

      - name: Build tarball
        id: build
        run: |
          tarball="$(jq -n \
            --arg name "${{ matrix.name }}" \
            --arg repo "${{ matrix.repo }}" \
            --arg vcs "${{ matrix.vcs }}" \
            --arg tag "${{ matrix.tag }}" \
            '{name: $name, repo: $repo, vcs: $vcs, tag: $tag}' \
            | bash ci/build-deps.sh)"
          echo "tarball=${tarball}" >> $GITHUB_OUTPUT

      - name: Create vendored release
        run: |
          asset="${{ steps.build.outputs.tarball }}"
          tag="${{ matrix.name }}-${{ matrix.tag }}"

          printf "Vendored release for %s version %s\n\nUpstream repository: %s\n" \
            "${{ matrix.name }}" "${{ matrix.tag }}" "${{ matrix.vcs }}" > release_notes.txt

          gh release create "${tag}" \
            --repo "$GITHUB_REPOSITORY" \
            --title "${{ matrix.name }} ${{ matrix.tag }}" \
            --notes-file release_notes.txt \
            --target "${GITHUB_SHA}" \
            "${asset}"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
