name: Manual Build Dependency Tarball

on:
  workflow_dispatch:
    inputs:
      package_name:
        description: "Package name (from config/vendor_manifest.json)"
        required: true
        type: string
      tag_version:
        description: "Git tag version (e.g., v1.2.3)"
        required: true
        type: string
      language:
        description: "Language type (e.g., go, rust)"
        required: true
        default: "go"
        type: string
      force_build:
        description: "Build even if release already exists"
        required: false
        type: boolean
        default: false

concurrency:
  group: manual-build-${{ inputs.package_name }}-${{ inputs.tag_version }}
  cancel-in-progress: true

permissions:
  contents: write
  packages: write

jobs:
  manual-build:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout repo
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          submodules: recursive

      - name: Setup language environment
        uses: ./.github/actions/setup-language
        with:
          language: ${{ inputs.language }}

      - name: Validate package exists in config
        id: validate
        run: |
          package_name="${{ inputs.package_name }}"
          tag_version="${{ inputs.tag_version }}"
          language="${{ inputs.language }}"

          config_file="config/vendor_manifest.json"
          if [[ ! -f ${config_file} ]]; then
            echo "::error::Config file not found: ${config_file}"
            exit 1
          fi

          if ! config_entry=$(jq -e --arg lang "$language" --arg name "$package_name" '.[$lang][] | select(.name == $name)' "${config_file}"); then
            echo "::error::Package '$package_name' not found in ${config_file}"
            exit 1
          fi

          jq -r '"repo=" + .repo,
            "vcs=" + .vcs,
            "subdir=" + (.subdir // ""),
            "build_crates=" + (if .build_crates == null then "true" else (.build_crates|tostring) end)' \
            <<< "$config_entry" >> "$GITHUB_OUTPUT"

          release_tag="${package_name}-${tag_version}"
          if [[ "${{ inputs.force_build }}" != "true" ]]; then
            if gh release view "$release_tag" >/dev/null 2>&1; then
              echo "::error::Release '$release_tag' already exists. Use force_build=true to override."
              exit 1
            fi
          fi

      - name: Build vendor tarball
        id: build
        shell: bash
        run: |
          mapfile -t lines < <(jq -n \
            --arg name "${{ inputs.package_name }}" \
            --arg repo "${{ steps.validate.outputs.repo }}" \
            --arg vcs "${{ steps.validate.outputs.vcs }}" \
            --arg tag "${{ inputs.tag_version }}" \
            --arg subdir "${{ steps.validate.outputs.subdir }}" \
            '{name: $name, repo: $repo, vcs: $vcs, tag: $tag, subdir: $subdir}' \
            | bash ci/build-"${{ inputs.language }}"-deps.sh)

          echo "vendored_tarball=${lines[0]}" >> $GITHUB_OUTPUT
          if [[ "${{ inputs.language }}" == "rust" ]]; then
            echo "base_dir=${lines[1]}" >> $GITHUB_OUTPUT
          fi

      - name: Setup uv (Rust only)
        if: inputs.language == 'rust' && steps.validate.outputs.build_crates == 'true'
        uses: astral-sh/setup-uv@v7
        with:
          working-directory: scripts/

      - name: Create crates tarball (Rust only)
        if: inputs.language == 'rust' && steps.validate.outputs.build_crates == 'true'
        id: crates
        run: |
          VERSION="${{ inputs.tag_version }}"
          VERSION="${VERSION#v}"
          CRATES_TARBALL="${{ inputs.package_name }}-${VERSION}-crates.tar.xz"

          uv run --project scripts \
            --group vendor-crates \
            --frozen \
            --no-dev \
            scripts/vendor_crates.py \
              -o "$CRATES_TARBALL" \
              "${{ steps.build.outputs.base_dir }}"

          echo "crates_tarball=$CRATES_TARBALL" >> $GITHUB_OUTPUT

      - name: Create or update release
        run: |
          tag="${{ inputs.package_name }}-${{ inputs.tag_version }}"
          if [[ "${{ inputs.force_build }}" == "true" ]]; then
            if gh release view "$tag" &> /dev/null; then
              echo "Force build enabled, deleting existing release..."
              gh release delete "$tag" --yes
            fi
          fi

          bash ci/create-release.sh \
            "${{ steps.build.outputs.vendored_tarball }}" \
            "${{ inputs.package_name }}" \
            "${{ inputs.tag_version }}" \
            "${{ steps.validate.outputs.vcs }}" \
            "vendored" \
            "${{ inputs.language }}" \
            "${{ steps.crates.outputs.crates_tarball || '' }}"
